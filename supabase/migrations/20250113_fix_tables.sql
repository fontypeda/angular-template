-- Drop existing policies
DROP POLICY IF EXISTS "Users can view their own songs" ON songs;
DROP POLICY IF EXISTS "Users can create their own songs" ON songs;
DROP POLICY IF EXISTS "Users can update their own songs" ON songs;
DROP POLICY IF EXISTS "Users can delete their own songs" ON songs;

-- Recreate songs table with proper structure
DROP TABLE IF EXISTS songs;
CREATE TABLE songs (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    title text NOT NULL,
    artist text NOT NULL,
    track_status text DEFAULT 'draft',
    is_released boolean DEFAULT false,
    length_seconds integer,
    audio_file_url text,
    cover_image_url text,
    owner_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL
);

-- Enable RLS
ALTER TABLE songs ENABLE ROW LEVEL SECURITY;

-- Create new policies for songs
CREATE POLICY "Users can view their own songs"
    ON songs FOR SELECT
    TO authenticated
    USING (owner_id = auth.uid());

CREATE POLICY "Users can create their own songs"
    ON songs FOR INSERT
    TO authenticated
    WITH CHECK (owner_id = auth.uid());

CREATE POLICY "Users can update their own songs"
    ON songs FOR UPDATE
    TO authenticated
    USING (owner_id = auth.uid());

CREATE POLICY "Users can delete their own songs"
    ON songs FOR DELETE
    TO authenticated
    USING (owner_id = auth.uid());

-- Drop existing playlist policies that might cause recursion
DROP POLICY IF EXISTS "Users can view their own playlists" ON playlists;
DROP POLICY IF EXISTS "Users can create their own playlists" ON playlists;
DROP POLICY IF EXISTS "Users can update their own playlists" ON playlists;
DROP POLICY IF EXISTS "Users can delete their own playlists" ON playlists;

-- Create simplified playlist policies
CREATE POLICY "Enable read access for own playlists"
    ON playlists FOR SELECT
    TO authenticated
    USING (
        auth.uid() = owner_id OR
        EXISTS (
            SELECT 1 FROM playlist_shares
            WHERE playlist_shares.playlist_id = playlists.id
            AND playlist_shares.shared_with = auth.uid()
        )
    );

CREATE POLICY "Enable insert access for own playlists"
    ON playlists FOR INSERT
    TO authenticated
    WITH CHECK (auth.uid() = owner_id);

CREATE POLICY "Enable update access for own playlists"
    ON playlists FOR UPDATE
    TO authenticated
    USING (auth.uid() = owner_id)
    WITH CHECK (auth.uid() = owner_id);

CREATE POLICY "Enable delete access for own playlists"
    ON playlists FOR DELETE
    TO authenticated
    USING (auth.uid() = owner_id);
